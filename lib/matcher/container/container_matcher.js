// Generated by LiveScript 1.2.0
(function(){
  var util, Debugger, ContextMatcher, CompiledMatcher, ContainerMatcher, toString$ = {}.toString;
  util = require('../../util');
  Debugger = util.Debugger;
  ContextMatcher = require('./context_matcher');
  CompiledMatcher = require('./compiled_matcher');
  module.exports = ContainerMatcher = (function(){
    ContainerMatcher.displayName = 'ContainerMatcher';
    var prototype = ContainerMatcher.prototype, constructor = ContainerMatcher;
    importAll$(prototype, arguments[0]);
    function ContainerMatcher(context, accessRequest, debugging){
      this.context = context;
      this.accessRequest = accessRequest;
      this.debugging = debugging;
      this.validate();
      this;
    }
    prototype.matchers = {};
    prototype.match = function(options){
      options == null && (options = {});
      this.debug('match', options);
      return this.include() || this.matchCompiled() && !this.exclude();
    };
    prototype.matchCompiled = function(){
      return this._mc || (this._mc = new CompiledMatcher(this.context, this.accessRequest, this.debugging).match());
    };
    prototype.include = function(){
      return this._include || (this._include = this.matcher('include').match());
    };
    prototype.exclude = function(){
      return this._exclude || (this._exclude = this.matcher('exclude').match());
    };
    prototype.matcher = function(key){
      var ref$;
      return (ref$ = this.matchers)[key] || (ref$[key] = new ContextMatcher(this.context, key, this.accessRequest, this.debugging));
    };
    prototype.validate = function(){
      if (toString$.call(this.context).slice(8, -1) !== 'Object') {
        throw Error("context must be an Object, was: " + this.context);
      }
      if (toString$.call(this.accessRequest).slice(8, -1) !== 'Object') {
        throw Error("access request must be an Object, was: " + this.accessRequest);
      }
    };
    return ContainerMatcher;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
